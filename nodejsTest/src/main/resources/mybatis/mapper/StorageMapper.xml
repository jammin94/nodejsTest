<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  <mapper namespace="ProductMapper"> 가 @Mapper 와 함께 밑의 한줄로 대체 됨-->
<mapper namespace="com.mvc.forrest.dao.storage.StorageDAO"> 	
 	
	<resultMap id="storageSelectMap" type="Storage">
		<result property="tranNo" 				column="tranNo" 				jdbcType="INTEGER"/>
		<result property="userId"	   			column="userId" 				jdbcType="VARCHAR" />
		<result property="prodNo" 			column="prodNo" 			jdbcType="INTEGER" />
		<result property="divyRequest" 			column="divyRequest" 		jdbcType="VARCHAR" />
		<result property="divyAddress" 			column="divyAddress" 		jdbcType="VARCHAR" />
		<result property="pickupAddress" 				column="pickupAddress" 					jdbcType="VARCHAR" />
		<result property="startDate" 			column="startDate" 			jdbcType="DATE" />
		<result property="endDate" 				column="endDate" 				jdbcType="DATE" />
		<result property="period" 			column="period" 				jdbcType="INTEGER"  />
		<result property="tranCode" 				column="tranCode" 				jdbcType="TINYINT"  />
		<result property="paymentNo" 				column="paymentNo" 				jdbcType="VARCHAR"  />
		<result property="paymentDate" 				column="paymentDate" 				jdbcType="TIMESTAMP"  />
		<result property="paymentWay" 				column="paymentWay" 				jdbcType="VARCHAR"  />
		<result property="receiverPhone" 				column="receiverPhone" 				jdbcType="VARCHAR"  />
		<result property="receiverName" 				column="receiverName" 				jdbcType="VARCHAR"  />
		<result property="prodName" 				column="prodName" 				jdbcType="VARCHAR"  />
		<result property="prodImg" 				column="prodImg" 				jdbcType="VARCHAR"  />
		<result property="originPrice" 				column="originPrice" 				jdbcType="INTEGER"  />
		<result property="discountPrice" 				column="discountPrice" 				jdbcType="INTEGER"  />
		<result property="resultPrice" 				column="resultPrice" 				jdbcType="INTEGER"  />
		<result property="rentalStartDate" 				column="rsd" 				jdbcType="DATE"  />
		<result property="rentalEndDate" 				column="red" 				jdbcType="DATE"  />
		
		<association property="storageProd" javaType="product">
			<id property="prodNo" column="prodNo"  jdbcType="INTEGER"/>
			<result property="prodCondition" 			column="prodCondition" 			jdbcType="VARCHAR" />
			<result property="recentImg" 				column="recentImg" 				jdbcType="VARCHAR"  />
			<result property="width" 				column="width" 				jdbcType="INTEGER"  />
			<result property="length" 				column="length" 				jdbcType="INTEGER"  />
			<result property="height" 				column="height" 				jdbcType="INTEGER"  />
			<result property="prodQuantity" 				column="prodQuantity" 				jdbcType="INTEGER"  />
			<result property="category" 				column="category" 				jdbcType="VARCHAR"  />
			<result property="isRental" 				column="isRental" 				jdbcType="TINYINT"  />
		</association>
	</resultMap>
	
	<!-- SQL : INSERT -->
	<insert 	id="addStorage"		parameterType="Storage" >
		INSERT 
	 	INTO transaction(tranNo, userId, prodNo, divyRequest, divyAddress, pickupAddress, startDate, endDate, period,
	 						paymentNo, paymentDate, paymentWay, receiverPhone, receiverName, prodName, prodImg, originPrice, discountPrice, resultPrice)
	 	values (#{tranNo}, #{userId}, #{prodNo}, #{divyRequest}, #{divyAddress}, #{pickupAddress}, date_add(curdate(), interval 1 day), date_add(curdate(), interval 1+#{period} day), #{period},
	 	 			#{paymentNo}, current_timestamp(), #{paymentWay}, #{receiverPhone}, #{receiverName}, #{prodName}, #{prodImg}, #{originPrice}, #{discountPrice}, #{resultPrice})
	 </insert>
	 
	  
	 <!-- SQL : SELECT ONE -->
	 <select 	id="getStorage"	parameterType="int"	resultMap="storageSelectMap">
		SELECT * FROM transaction t, product p 
		where t.tranNo =  #{tranNo} and t.prodNo = p.prodNo
	 </select>
	 
	  <!-- SQL : SELECT ONE -->
	 <select 	id="getMaxTranNoForStorage" resultMap="storageSelectMap">
		SELECT MAX tranNo FROM transaction
	 </select>
	 
	 
	 <!-- SQL : UPDATE -->
	 <!-- 보관물품 기간연장 -->
	 <update	id="updateStorage"	parameterType="Storage" >
	   	UPDATE transaction
	   	<set>
	 	endDate = date_add(endDate, INTERVAL #{period} day),
	 	period = period + #{period},
	 	paymentNo = #{paymentNo},
	 	paymentDate = current_timestamp(),
	 	paymentWay = #{paymentWay}, 
	 	originPrice = originPrice + #{originPrice},
	 	discountPrice = discountPrice + #{discountPrice},
	 	resultPrice = resultPrice + #{resultPrice}
	   	</set>
	   	where tranNo = #{tranNo}
	 </update>
	 
	 <!-- SQL : DELETE -->
	 <!-- 기간연장시 기존의 저장된 물품정보를 삭제 -->
	 
	 <delete id="deleteStorage" parameterType="int">
	 DELETE FROM transaction where tranNo = #{tranNo}
	 </delete>
		 
	<!-- SQL : SELECT LIST -->
	<select  id="getStorageList"  parameterType="map"	resultMap="storageSelectMap">
	  	SELECT t.tranNo, t.prodImg, t.prodName, t.prodNo, t.startDate, t.endDate, t.paymentNo, t.userId, t.resultPrice, p.recentImg, p.prodCondition, p.prodQuantity, p.isRental,  a.startDate rsd, a.endDate red 
	 	FROM product p, transaction t left outer join (SELECT prodNo, startDate, endDate FROM transaction WHERE tranCode = 1 AND endDate > DATE(NOW())) a on t.prodNo = a.prodNo
	 	<where>
	 		p.prodNo = t.prodNo and t.userId = #{userId} and tranCode = 0
	 		<if test="searchProductCondition != null">
	 		<!-- 현재보관중인 물품만 보기위한 조건-->
	 		 and p.prodCondition = #{searchProductCondition}
	 		</if>
	 	</where>
	 	ORDER BY t.tranNo DESC
	 </select>
	 
	 <!-- SQL : SELECT LIST -->
	 <!-- 관리자를 위한 리스트페이지 -->
	<select  id="getStorageListForAdmin"  parameterType="Search"	resultMap="storageSelectMap">
	  	SELECT t.prodNo, t.tranNo, t.userId, t.prodName, t.startDate, t.endDate, t.paymentDate, t.resultPrice,  p.recentImg, p.prodCondition
	 	FROM product p, transaction t
	 	<where>
	 		 p.prodNo = t.prodNo AND  
	 		(p.prodCondition ='물품보관승인신청중' OR 
	 		 p.prodCondition = '입고중' OR
	 		 p.prodCondition = '보관중' OR 
	 		 p.prodCondition = '출고승인신청중' OR 
	 		 p.prodCondition = '출고완료')
	 		 
	 		<!-- ProductCondition만 선택한경우-->
	 		<if test="searchKeyword == null and searchCondition == null and searchProductCondition != null" >
	 		 and p.prodCondition = #{searchProductCondition}
	 		</if>
	 	
	 		
	 	<if test="searchCondition != null">
	 	
	 		<!-- ProductCondition과  searchCondition, searchKeyword 모두 선택한경우-->
	 		<if test="searchKeyword != null and searchCondition == 1  and searchProductCondition != null" >
	 		 and p.prodCondition = #{searchProductCondition} and t.prodName LIKE CONCAT('%',#{searchKeyword},'%')
	 		</if>
	 		
	 		<if test="searchKeyword != null and searchCondition == 2  and searchProductCondition != null" >
	 		 and p.prodCondition = #{searchProductCondition} and t.userId LIKE CONCAT('%',#{searchKeyword},'%')
	 		</if>
	 		
	 		<!-- searchCondition, searchKeyword 를 선택한경우-->
	 			<if test="searchKeyword != null and searchCondition == 1 and searchProductCondition == null" >
	 		 and t.prodName LIKE CONCAT('%',#{searchKeyword},'%')
	 		</if>
	 		
	 		<if test="searchKeyword != null and searchCondition == 2 and searchProductCondition == null" >
	 		 and t.userId LIKE CONCAT('%',#{searchKeyword},'%')
	 		</if>
	 	</if>
	 	
	 		
	 		
	 	</where>
	 	<if test="orderCondition != null">
	 		<if test='orderCondition == "tranNoASC"'>
	 		ORDER BY t.tranNo ASC
	 		</if>
	 		<if test='orderCondition == "tranNoDESC"'>
	 		ORDER BY t.tranNo DESC
	 		</if>
	 		<if test='orderCondition == "startDateASC"'>
	 		ORDER BY t.startDate ASC
	 		</if>
	 		<if test='orderCondition == "startDateDESC"'>
	 		ORDER BY t.startDate DESC
	 		</if>
	 	</if>
	 </select>

	
	<!-- SQL : SELECT ROW Count -->	 
	 <select  id="getTotalCount"  parameterType="Search"	 resultType="int">
	  	SELECT COUNT(*)
	  	FROM product p, transaction t
	  	<where>
	 		 p.prodNo = t.prodNo AND  
	 		(p.prodCondition ='물품보관승인신청중' OR 
	 		 p.prodCondition = '입고중' OR
	 		 p.prodCondition = '보관중' OR 
	 		 p.prodCondition = '출고승인신청중' OR 
	 		 p.prodCondition = '출고완료')
	 		
	 		
	 		<if test="searchKeyword == null and searchCondition == null and searchProductCondition != null" >
	 		 and p.prodCondition = #{searchProductCondition}
	 		</if>
	 		
	 	<if test="searchCondition != null">
	 		
	 		<if test="searchKeyword != null and searchCondition == 1  and searchProductCondition != null" >
	 		 and p.prodCondition = #{searchProductCondition} and t.prodName LIKE CONCAT('%',#{searchKeyword},'%')
	 		</if>
	 		
	 		<if test="searchKeyword != null and searchCondition == 2  and searchProductCondition != null" >
	 		 and p.prodCondition = #{searchProductCondition} and t.userId LIKE CONCAT('%',#{searchKeyword},'%')
	 		</if>
	 		
	 		
	 			<if test="searchKeyword != null and searchCondition == 1 and searchProductCondition == null" >
	 		 and t.prodName LIKE CONCAT('%',#{searchKeyword},'%')
	 		</if>
	 		
	 		<if test="searchKeyword != null and searchCondition == 2 and searchProductCondition == null" >
	 		 and t.userId LIKE CONCAT('%',#{searchKeyword},'%')
	 		</if>
	 	</if>
	 		
	 	</where>
	  	
	 </select>
	 
</mapper>